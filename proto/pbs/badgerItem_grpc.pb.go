// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: badgerItem.proto

package pbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Badger_Get_FullMethodName    = "/Badger/Get"
	Badger_Set_FullMethodName    = "/Badger/Set"
	Badger_Delete_FullMethodName = "/Badger/Delete"
	Badger_Exists_FullMethodName = "/Badger/Exists"
	Badger_Status_FullMethodName = "/Badger/Status"
	Badger_List_FullMethodName   = "/Badger/List"
)

// BadgerClient is the client API for Badger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BadgerClient interface {
	Get(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error)
	Set(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error)
	Delete(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error)
	Exists(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error)
	Status(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error)
	List(ctx context.Context, in *ListFilter, opts ...grpc.CallOption) (*ListFilterReply, error)
}

type badgerClient struct {
	cc grpc.ClientConnInterface
}

func NewBadgerClient(cc grpc.ClientConnInterface) BadgerClient {
	return &badgerClient{cc}
}

func (c *badgerClient) Get(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemReply)
	err := c.cc.Invoke(ctx, Badger_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgerClient) Set(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemReply)
	err := c.cc.Invoke(ctx, Badger_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgerClient) Delete(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemReply)
	err := c.cc.Invoke(ctx, Badger_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgerClient) Exists(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemReply)
	err := c.cc.Invoke(ctx, Badger_Exists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgerClient) Status(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemReply)
	err := c.cc.Invoke(ctx, Badger_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgerClient) List(ctx context.Context, in *ListFilter, opts ...grpc.CallOption) (*ListFilterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilterReply)
	err := c.cc.Invoke(ctx, Badger_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BadgerServer is the server API for Badger service.
// All implementations must embed UnimplementedBadgerServer
// for forward compatibility.
type BadgerServer interface {
	Get(context.Context, *Item) (*ItemReply, error)
	Set(context.Context, *Item) (*ItemReply, error)
	Delete(context.Context, *Item) (*ItemReply, error)
	Exists(context.Context, *Item) (*ItemReply, error)
	Status(context.Context, *Item) (*ItemReply, error)
	List(context.Context, *ListFilter) (*ListFilterReply, error)
	mustEmbedUnimplementedBadgerServer()
}

// UnimplementedBadgerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBadgerServer struct{}

func (UnimplementedBadgerServer) Get(context.Context, *Item) (*ItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBadgerServer) Set(context.Context, *Item) (*ItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedBadgerServer) Delete(context.Context, *Item) (*ItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBadgerServer) Exists(context.Context, *Item) (*ItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedBadgerServer) Status(context.Context, *Item) (*ItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedBadgerServer) List(context.Context, *ListFilter) (*ListFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBadgerServer) mustEmbedUnimplementedBadgerServer() {}
func (UnimplementedBadgerServer) testEmbeddedByValue()                {}

// UnsafeBadgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BadgerServer will
// result in compilation errors.
type UnsafeBadgerServer interface {
	mustEmbedUnimplementedBadgerServer()
}

func RegisterBadgerServer(s grpc.ServiceRegistrar, srv BadgerServer) {
	// If the following call pancis, it indicates UnimplementedBadgerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Badger_ServiceDesc, srv)
}

func _Badger_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Badger_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerServer).Get(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Badger_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Badger_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerServer).Set(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Badger_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Badger_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerServer).Delete(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Badger_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Badger_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerServer).Exists(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Badger_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Badger_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerServer).Status(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Badger_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Badger_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgerServer).List(ctx, req.(*ListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// Badger_ServiceDesc is the grpc.ServiceDesc for Badger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Badger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Badger",
	HandlerType: (*BadgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Badger_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Badger_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Badger_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _Badger_Exists_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Badger_Status_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Badger_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "badgerItem.proto",
}
